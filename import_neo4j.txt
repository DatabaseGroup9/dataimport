Import 1:
wget -O - https://bit.ly/docker-install | bash

mkdir import
mkdir plugins

cd import/


wget https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/books.csv
wget https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/authors.csv
wget https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/cities.csv
wget https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/wrote.csv
wget https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/mentioned.csv

sed -i -E '1s/.*/:ID,title,short_title/' books.csv
sed -i -E '1s/.*/:ID,fullName,firstName,surName,title/' authors.csv
sed -i -E '1s/.*/:ID,name,lat,lon/' cities.csv
sed -i -E '1s/.*/:ID,:ID/' wrote.csv
sed -i -E '1s/.*/:ID,:ID,count/' mentioned.csv
head -1 books.csv
head -1 authors.csv
head -1 wrote.csv
head -1 cities.csv
head -1 mentioned.csv


#authorID,bookID
#cityID,name,lat,lon
#authorID,fullName,firstName,surName,title
#bookID,cityID,count




cd ..

cd plugins
echo "Downloading APOC plugin"
wget https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/3.3.0.1/apoc-3.3.0.1-all.jar
echo "Downloading algorithms plugin"
wget https://github.com/neo4j-contrib/neo4j-graph-algorithms/releases/download/3.3.2.0/graph-algorithms-algo-3.3.2.0.jar



cd ..


docker run \
    -d --name neo4j \
    --rm \
    --publish=7474:7474 \
    --publish=7687:7687 \
	-v $(pwd):/data/databases \
    --volume=$(pwd)/import:/import \
    --volume=$(pwd)/plugins:/plugins \
    --env NEO4J_AUTH=neo4j/class \
    --env=NEO4J_dbms_security_procedures_unrestricted=apoc.\\\*,algo.\\\* \
	--env=NEO4J_dbms_memory_pagecache_size=10G \
	--env=NEO4J_dbms_memory_heap_initial__size=10G \
	--env=NEO4J_dbms_memory_heap_max__size=10G \
    neo4j
	
	
	
	

docker exec neo4j sh -c 'neo4j stop'
docker exec neo4j sh -c 'rm -rf data/databases/graph.db'	

docker exec neo4j sh -c 'neo4j-admin import \
    --nodes:Book /import/books.csv \
    --nodes:Author /import/authors.csv \	
    --relationships:AUTHORED /import/wrote.csv \    
	--nodes:City /import/city.csv \
    --relationships:MENTIONS /import/mentioned.csv \
    --ignore-missing-nodes=true \
    --ignore-duplicate-nodes=true \
    --id-type=INTEGER'

docker restart neo4j











	
docker run \
-d --name neo4j \
--rm \
-v $(pwd):/data/databases \
--publish=7474:7474 \
--publish=7687:7687 \
--env NEO4J_AUTH=neo4j/class \
	--env=NEO4J_dbms_memory_pagecache_size=28G \
	--env=NEO4J_dbms_memory_heap_initial__size=28G \
	--env=NEO4J_dbms_memory_heap_max__size=28G \
neo4j

Test scripts
MATCH (b:Book)-[r:MENTIONS ]-(c:City) WHERE LOWER(c.name) = LOWER($cityName) RETURN b
MATCH (b:Book)-[r:MENTIONS]->(c:City) WHERE LOWER(b.title) = LOWER($bookTitle) RETURN c

MATCH (a:Author)-[r:AUTHORED ]-(b:Book) WHERE LOWER(a.name) = LOWER($authorName) RETURN b



USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/books.csv" AS row
MERGE (:Book {id: row.bookID, title: row.title, short_title: row.title});

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/authors.csv" AS row
MERGE (:Author {id: row.authorID, name: row.fullName, firstName: row.firstName, surName: row.surName});

MATCH (n:City { name: 'UNKNOWN' })
DELETE n
USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/cities.csv" AS row
MERGE (:City {id: row.cityID, name: row.name, lat: row.lat,  lon: row.lon});

USING PERIODIC COMMIT 
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/wrote.csv" AS row
MATCH (b:Book {id: row.bookID}), 
                      (a:Author {id:row.authorID})
CREATE (a)-[:AUTHORED]->(b);



USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/DatabaseGroup9/dataimport/master/mentioned.csv" AS row
MATCH (b:Book {id: row.bookID }), 
                      (c:City {id: row.cityID})
CREATE (b)-[:MENTIONS {mentions: row.count}]->(c);